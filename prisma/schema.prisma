generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// done
model Admin {
  id String @id
  username String @unique
}

// done
model Student {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  bloodType String
  sex UserSex
  birthday DateTime
  createdAt DateTime @default(now())
  parentId String
  parent Parent @relation(fields: [parentId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  results Result[]
}

// done
model Teacher {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String? @unique
  bloodType String
  sex UserSex
  createdAt DateTime @default(now())
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
  birthday DateTime
}

// done
model Parent {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  createdAt DateTime @default(now())
  students Student[]
}

// done
model Grade {
  id Int @id @default(autoincrement())
  level Int @unique
  students Student[]
  classes Class[]
}

// done
model Class {
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  supervisorId String?
  supervisor Teacher? @relation(fields: [supervisorId], references: [id])
  lessons Lesson[]
  students Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  announcements Announcements[]
  events Events[]
}

// done
model Subject {
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

// done
model Lesson {
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime DateTime
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendance Attendance[]
}

// done
model Exam {
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}

//done
model Assignment {
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  dueDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}

// done
model Result {
  id Int @id @default(autoincrement())
  score Int
  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
}

model Attendance {
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

// done
model Events {
  id Int @id @default(autoincrement())
  title String
  description String
  startTime DateTime
  endTime DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

// done
model Announcements {
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}